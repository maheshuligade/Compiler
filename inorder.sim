START
MOV BP,257
MOV SP,257
PUSH BP
MOV R0,SP
MOV R1,3
ADD R0,R1
MOV SP,R0
PUSH BP
call initialize
call main
HALT

main:
PUSH BP
MOV BP,SP
MOV R0,1
PUSH R0
MOV R0,2
PUSH R0
MOV R1,0
MOV R0,1
MOV R1,BP
ADD R0,R1
PUSH R0
PUSH R0
CALL allocate
POP R0
POP R0
MOV R1,BP
MOV R2,4
ADD R1,R2
MOV R1,[R1]
MOV [R0],R1

MOV R0,1
MOV R1,BP
ADD R0,R1
MOV R0,[R0]
MOV R1,0
ADD R0,R1

MOV R1,[R0]
OUT R1

MOV R0,SP
MOV R1,2
SUB R0,R1
MOV SP,R0
MOV R0,BP
MOV R1,2
SUB R0,R1
MOV R1,0
MOV [R0],R1
MOV SP,BP
POP BP
RET

insert:
PUSH BP
MOV BP,SP
MOV R0,1
PUSH R0
MOV R0,SP
MOV R1,2
SUB R0,R1
MOV SP,R0
MOV R0,BP
MOV R1,2
SUB R0,R1
MOV R1,-3
MOV R2,BP
ADD R1,R2
MOV R1,[R1]
MOV R2,0
ADD R1,R2
MOV R1,[R1]
MOV [R0],R1
MOV SP,BP
POP BP
RET

inorder:
PUSH BP
MOV BP,SP
MOV R0,1
PUSH R0

MOV R0,-3
MOV R1,BP
ADD R0,R1
MOV R0,[R0]
MOV R1,0
ADD R0,R1
MOV R0,[R0]


MOV R1,0
MOV R2,1
SUB R1,R2

EQ R0,R1
JZ R0,LABEL0
JMP LABEL1
LABEL0:
MOV R2,0
MOV R1,1
MOV R2,BP
ADD R1,R2
PUSH R0
PUSH R1
MOV R2,-3
MOV R3,BP
ADD R2,R3
MOV R2,[R2]
MOV R3,1
ADD R2,R3
PUSH R2
PUSH R2
CALL inorder
POP R2
POP R2
POP R1
POP R0
MOV R3,BP
MOV R4,5
ADD R3,R4
MOV R3,[R3]
MOV [R1],R3

MOV R2,-3
MOV R3,BP
ADD R2,R3
MOV R2,[R2]
MOV R3,0
ADD R2,R3

MOV R3,[R2]
OUT R3

MOV R3,0
MOV R2,1
MOV R3,BP
ADD R2,R3
PUSH R0
PUSH R1
PUSH R2
MOV R3,-3
MOV R4,BP
ADD R3,R4
MOV R3,[R3]
MOV R4,2
ADD R3,R4
PUSH R3
PUSH R3
CALL inorder
POP R3
POP R3
POP R2
POP R1
POP R0
MOV R4,BP
MOV R5,6
ADD R4,R5
MOV R4,[R4]
MOV [R2],R4
LABEL1:
MOV R2,SP
MOV R3,2
SUB R2,R3
MOV SP,R2
MOV R2,BP
MOV R3,2
SUB R2,R3
MOV R3,0
MOV [R2],R3
MOV SP,BP
POP BP
RET


initialize:
PUSH BP
MOV BP,SP
MOV  R0,1
PUSH R0
MOV [256],0
MOV R0,0
MOV R1,1
MOV R2,BP
ADD R1,R2
MOV [R1],R0
LabelWhile:
MOV R1,1
MOV R2,BP
ADD R1,R2
MOV R0,[R1]
MOV R1,256
LT R0,R1
JZ R0,LabelEndwhile
MOV R1,1
MOV R2,BP
ADD R1,R2
MOV R0,[R1]
MOV [R0],-1
MOV R2,1
ADD R0,R2
MOV [R1],R0
JMP LabelWhile
LabelEndwhile:
MOV R0,0
MOV R1,1
MOV R2,BP
ADD R1,R2
MOV [R1],R0
LabelWhile2:
MOV R1,1
MOV R2,BP
ADD R1,R2
MOV R0,[R1]
MOV R1,248
LT R0,R1
JZ R0,LabelEndwhile2
MOV R1,1
MOV R2,BP
ADD R1,R2
MOV R0,[R1]
MOV R2,8
ADD R2,R0
MOV [R0],R2
MOV R2,8
ADD R0,R2
MOV [R1],R0
JMP LabelWhile2
LabelEndwhile2:
POP R0
MOV R1,BP
MOV R2,2
SUB R1,R2
MOV R0,0
MOV [R1],R0
MOV SP,BP
POP BP
RET


allocate:
PUSH BP
MOV BP,SP
MOV  R0,1
PUSH R0
MOV R1,1
MOV R2,BP
ADD R1,R2
MOV R0,[256]
MOV [R1],R0


LabelIf:
MOV R1,-1
MOV R2,[256]
NE R1,R2
JZ R1,LabelEndif
MOV R1,[256]
MOV R1,[R1]
MOV [256],R1
LabelEndif:
POP R0
MOV R1,BP
MOV R2,2
SUB R1,R2
MOV R2,1
MOV R3,BP
ADD R2,R3
MOV R2,[R2]
MOV [R1],R2
MOV SP,BP
POP BP
RET


free:
PUSH BP
MOV BP,SP
MOV  R0,1
PUSH R0
MOV R1,-3
MOV R2,BP
ADD R1,R2
MOV R2,[R1]
MOV R3,1
MOV R4,BP
ADD R3,R4
MOV [R3],R2
MOV R4,[256]
MOV [R2],R4
MOV [256],R2
MOV R3,[256]
MOV R4,1
ADD R3,R4
MOV R4,7
ADD R4,R3
LabelWhile5:
MOV R5,R3
LT R5,R4
JZ R5,LabelEndwhile5
MOV [R3],-1
MOV R5,1
ADD R3,R5
JMP LabelWhile5
LabelEndwhile5:
POP R0
MOV R1,BP
MOV R2,2
SUB R1,R2
MOV [R1],[256]
MOV SP,BP
POP BP
RET
